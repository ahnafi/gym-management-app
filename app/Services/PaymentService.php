<?php

namespace App\Services;

use App\Models\Transaction;
use App\Models\MembershipPackage;
use App\Models\GymClass;
use Illuminate\Support\Facades\DB;
use App\Models\PersonalTrainerPackage;
use Illuminate\Support\Str;
use App\Services\AssignmentService;
use Illuminate\Support\Facades\Auth;

class PaymentService
{
    public function initiatePayment(array $data): Transaction
    {
        $amount = $this->resolveAmount($data['purchasable_type'], $data['purchasable_id']);

        $transaction = Transaction::create([
            'amount' => $amount,
            'snap_token' => null,
            'payment_date' => null,
            'payment_status' => 'pending',
            'purchasable_type' => $data['purchasable_type'],
            'purchasable_id' => $data['purchasable_id'],
            'gym_class_schedule_id' => $data['gym_class_schedule_id'] ?? null,
            'user_id' => auth()->id(),
        ]);

        // Midtrans configuration
        \Midtrans\Config::$serverKey = config('midtrans.server_key');
        \Midtrans\Config::$isProduction = config('midtrans.isProduction', false);
        \Midtrans\Config::$isSanitized = true;
        \Midtrans\Config::$is3ds = true;

        $itemName = match ($transaction->purchasable_type) {
            'membership_package' => MembershipPackage::findOrFail($transaction->purchasable_id)->name,
            'gym_class' => GymClass::findOrFail($transaction->purchasable_id)->name,
            'personal_trainer_package' => PersonalTrainerPackage::findOrFail($transaction->purchasable_id)->name,
        };

        $params = [
            'transaction_details' => [
                'order_id' => $transaction->code, // code already generated by model
                'gross_amount' => $transaction->amount,
            ],
            'item_details' => [[
                'id' => $transaction->code,
                'price' => $transaction->amount,
                'quantity' => 1,
                'name' => $itemName,
            ]],
            'customer_details' => [
                'first_name' => auth()->user()->name,
                'email' => auth()->user()->email,
            ],
        ];

        $snapToken = \Midtrans\Snap::getSnapToken($params);

        $transaction->update(['snap_token' => $snapToken]);

        return $transaction;
    }

    protected function resolveAmount(string $type, int $id): int
    {
        return match ($type) {
            'membership_package' => MembershipPackage::findOrFail($id)->price,
            'gym_class' => GymClass::findOrFail($id)->price,
            'personal_trainer_package' => PersonalTrainerPackage::findOrFail($id)->price,
        };
    }

    public function updatePaymentStatus(int $id, string $status)
    {
        // Start a database transaction
        DB::transaction(function () use ($id, $status) {
            // Update the transaction status
            $transaction = Transaction::findOrFail($id);
            $transaction->update([
                'payment_status' => $status,
                'payment_date' => now(),
            ]);

            // Handle the assignment based on purchasable type
            switch ($transaction->purchasable_type) {
                case 'membership_package':
                    AssignmentService::updateMembership(
                        $transaction->user_id,
                        $transaction->purchasable_id
                    );
                    break;

                case 'gym_class':
                    AssignmentService::assignGymClass(
                        $transaction->user_id,
                        $transaction->purchasable_id,
                        $transaction->gym_class_schedule_id
                    );
                    break;

                case 'personal_trainer_package':
                    AssignmentService::assignPersonalTrainer(
                        $transaction->user_id,
                        $transaction->purchasable_id
                    );
                    break;
            }
        });
    }
}
